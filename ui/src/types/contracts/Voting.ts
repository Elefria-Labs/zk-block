/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace Voting {
  export type PollStruct = {
    pollId: BigNumberish;
    pollStatus: BigNumberish;
    title: string;
    creator: string;
    quorum: BigNumberish;
    votes: BigNumberish[];
    createdAt: BigNumberish;
  };

  export type PollStructOutput = [
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    BigNumber[],
    BigNumber,
  ] & {
    pollId: BigNumber;
    pollStatus: number;
    title: string;
    creator: string;
    quorum: BigNumber;
    votes: BigNumber[];
    createdAt: BigNumber;
  };
}

export interface VotingInterface extends utils.Interface {
  contractName: 'Voting';
  functions: {
    'castVote(uint256,uint256,uint256,uint256[8],uint256[4])': FunctionFragment;
    'commitmentTree()': FunctionFragment;
    'createPoll(uint256,string,uint256)': FunctionFragment;
    'endPoll(uint256)': FunctionFragment;
    'getAllPolls()': FunctionFragment;
    'getPollDetailsById(uint256)': FunctionFragment;
    'getPolls()': FunctionFragment;
    'getRegisteredCommitments()': FunctionFragment;
    'nullifierHashes(uint256)': FunctionFragment;
    'pollIdCounter()': FunctionFragment;
    'pollIds(uint256)': FunctionFragment;
    'polls(uint256)': FunctionFragment;
    'registeredCommitments(uint256)': FunctionFragment;
    'registeredCommitmentsMapping(uint256)': FunctionFragment;
    'regsiterCommitment(uint256)': FunctionFragment;
    'startPoll(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'castVote',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'commitmentTree',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'createPoll',
    values: [BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'endPoll',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllPolls',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPollDetailsById',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getPolls', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredCommitments',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nullifierHashes',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'pollIdCounter',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'pollIds',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'polls', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'registeredCommitments',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'registeredCommitmentsMapping',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'regsiterCommitment',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'startPoll',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'castVote', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'commitmentTree',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'createPoll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endPoll', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAllPolls',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPollDetailsById',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getPolls', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredCommitments',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nullifierHashes',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'pollIdCounter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'pollIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'polls', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registeredCommitments',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registeredCommitmentsMapping',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'regsiterCommitment',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'startPoll', data: BytesLike): Result;

  events: {
    'CommitmentRegistered(address,uint256)': EventFragment;
    'PollCreated(uint256,address)': EventFragment;
    'PollEnded(uint256,address)': EventFragment;
    'PollStarted(uint256,address)': EventFragment;
    'Voted(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CommitmentRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PollCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PollEnded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PollStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Voted'): EventFragment;
}

export type CommitmentRegisteredEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; arg1: BigNumber }
>;

export type CommitmentRegisteredEventFilter =
  TypedEventFilter<CommitmentRegisteredEvent>;

export type PollCreatedEvent = TypedEvent<
  [BigNumber, string],
  { arg0: BigNumber; arg1: string }
>;

export type PollCreatedEventFilter = TypedEventFilter<PollCreatedEvent>;

export type PollEndedEvent = TypedEvent<
  [BigNumber, string],
  { arg0: BigNumber; arg1: string }
>;

export type PollEndedEventFilter = TypedEventFilter<PollEndedEvent>;

export type PollStartedEvent = TypedEvent<
  [BigNumber, string],
  { arg0: BigNumber; arg1: string }
>;

export type PollStartedEventFilter = TypedEventFilter<PollStartedEvent>;

export type VotedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { arg0: BigNumber; arg1: BigNumber }
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface Voting extends BaseContract {
  contractName: 'Voting';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castVote(
      _vote: BigNumberish,
      _nullifierHash: BigNumberish,
      _pollId: BigNumberish,
      _proof: BigNumberish[],
      _input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    commitmentTree(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    createPoll(
      _identityCommitment: BigNumberish,
      _title: string,
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    endPoll(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAllPolls(
      overrides?: CallOverrides,
    ): Promise<[Voting.PollStructOutput[]]>;

    getPollDetailsById(
      _pollId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[Voting.PollStructOutput]>;

    getPolls(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getRegisteredCommitments(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    nullifierHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    pollIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    pollIds(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, string, string, BigNumber, BigNumber] & {
        pollId: BigNumber;
        pollStatus: number;
        title: string;
        creator: string;
        quorum: BigNumber;
        createdAt: BigNumber;
      }
    >;

    registeredCommitments(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    registeredCommitmentsMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    regsiterCommitment(
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startPoll(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  castVote(
    _vote: BigNumberish,
    _nullifierHash: BigNumberish,
    _pollId: BigNumberish,
    _proof: BigNumberish[],
    _input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  commitmentTree(overrides?: CallOverrides): Promise<
    [number, BigNumber, BigNumber] & {
      depth: number;
      root: BigNumber;
      numberOfLeaves: BigNumber;
    }
  >;

  createPoll(
    _identityCommitment: BigNumberish,
    _title: string,
    _quorum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  endPoll(
    pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAllPolls(overrides?: CallOverrides): Promise<Voting.PollStructOutput[]>;

  getPollDetailsById(
    _pollId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<Voting.PollStructOutput>;

  getPolls(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRegisteredCommitments(overrides?: CallOverrides): Promise<BigNumber[]>;

  nullifierHashes(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  pollIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  pollIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  polls(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, string, string, BigNumber, BigNumber] & {
      pollId: BigNumber;
      pollStatus: number;
      title: string;
      creator: string;
      quorum: BigNumber;
      createdAt: BigNumber;
    }
  >;

  registeredCommitments(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  registeredCommitmentsMapping(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  regsiterCommitment(
    _identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startPoll(
    pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    castVote(
      _vote: BigNumberish,
      _nullifierHash: BigNumberish,
      _pollId: BigNumberish,
      _proof: BigNumberish[],
      _input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<void>;

    commitmentTree(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    createPoll(
      _identityCommitment: BigNumberish,
      _title: string,
      _quorum: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    endPoll(pollId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAllPolls(overrides?: CallOverrides): Promise<Voting.PollStructOutput[]>;

    getPollDetailsById(
      _pollId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<Voting.PollStructOutput>;

    getPolls(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRegisteredCommitments(overrides?: CallOverrides): Promise<BigNumber[]>;

    nullifierHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    pollIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    pollIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, string, string, BigNumber, BigNumber] & {
        pollId: BigNumber;
        pollStatus: number;
        title: string;
        creator: string;
        quorum: BigNumber;
        createdAt: BigNumber;
      }
    >;

    registeredCommitments(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registeredCommitmentsMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    regsiterCommitment(
      _identityCommitment: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    startPoll(pollId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CommitmentRegistered(address,uint256)'(
      arg0?: string | null,
      arg1?: BigNumberish | null,
    ): CommitmentRegisteredEventFilter;
    CommitmentRegistered(
      arg0?: string | null,
      arg1?: BigNumberish | null,
    ): CommitmentRegisteredEventFilter;

    'PollCreated(uint256,address)'(
      arg0?: BigNumberish | null,
      arg1?: string | null,
    ): PollCreatedEventFilter;
    PollCreated(
      arg0?: BigNumberish | null,
      arg1?: string | null,
    ): PollCreatedEventFilter;

    'PollEnded(uint256,address)'(
      arg0?: BigNumberish | null,
      arg1?: string | null,
    ): PollEndedEventFilter;
    PollEnded(
      arg0?: BigNumberish | null,
      arg1?: string | null,
    ): PollEndedEventFilter;

    'PollStarted(uint256,address)'(
      arg0?: BigNumberish | null,
      arg1?: string | null,
    ): PollStartedEventFilter;
    PollStarted(
      arg0?: BigNumberish | null,
      arg1?: string | null,
    ): PollStartedEventFilter;

    'Voted(uint256,uint256)'(
      arg0?: BigNumberish | null,
      arg1?: BigNumberish | null,
    ): VotedEventFilter;
    Voted(
      arg0?: BigNumberish | null,
      arg1?: BigNumberish | null,
    ): VotedEventFilter;
  };

  estimateGas: {
    castVote(
      _vote: BigNumberish,
      _nullifierHash: BigNumberish,
      _pollId: BigNumberish,
      _proof: BigNumberish[],
      _input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    commitmentTree(overrides?: CallOverrides): Promise<BigNumber>;

    createPoll(
      _identityCommitment: BigNumberish,
      _title: string,
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    endPoll(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAllPolls(overrides?: CallOverrides): Promise<BigNumber>;

    getPollDetailsById(
      _pollId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPolls(overrides?: CallOverrides): Promise<BigNumber>;

    getRegisteredCommitments(overrides?: CallOverrides): Promise<BigNumber>;

    nullifierHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pollIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    pollIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registeredCommitments(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registeredCommitmentsMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    regsiterCommitment(
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startPoll(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      _vote: BigNumberish,
      _nullifierHash: BigNumberish,
      _pollId: BigNumberish,
      _proof: BigNumberish[],
      _input: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    commitmentTree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPoll(
      _identityCommitment: BigNumberish,
      _title: string,
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    endPoll(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAllPolls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPollDetailsById(
      _pollId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPolls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegisteredCommitments(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pollIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollIds(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registeredCommitments(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registeredCommitmentsMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    regsiterCommitment(
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startPoll(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
